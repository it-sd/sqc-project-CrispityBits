<%- include('partials/header.ejs') %>
<!-- <div>
  <p id="welcomeTag" class="center">Welcome to my final project! This is me attempting to make something somewhat functional.</p>

  <input class="center" id="searchBar" type="text" placeholder="Search..">
</div> -->
<body">
  

  <!-- Sidebar/menu -->
  <nav class="w3-sidebar w3-red w3-collapse w3-top w3-large w3-padding" style="z-index:3;width:300px;font-weight:bold;" id="mySidebar"><br>
    <a href="javascript:void(0)" onclick="w3_close()" class="w3-button w3-hide-large w3-display-topleft" style="width:100%;font-size:22px">Close Menu</a>
    <div class="w3-container">
      <h3 class="w3-padding-64"><b>SQC<br>Final Project</b></h3>
    </div>
    <div class="w3-bar-block">
      <a href="/" onclick="w3_close()" class="w3-bar-item w3-button w3-hover-white">Home</a> 
      <a href="/about" onclick="w3_close()" class="w3-bar-item w3-button w3-hover-white">About</a> 
      <a href="/health" onclick="w3_close()" class="w3-bar-item w3-button w3-hover-white">Health</a> 
    </div>
  </nav>

  <!-- Top menu on small screens -->
  <header class="w3-container w3-top w3-hide-large w3-red w3-xlarge w3-padding">
    <a href="javascript:void(0)" class="w3-button w3-red w3-margin-right" onclick="w3_open()">â˜°</a>
    <span>SQC Final Project</span>
  </header>

  <!-- Overlay effect when opening sidebar on small screens -->
  <div class="w3-overlay w3-hide-large" onclick="w3_close()" style="cursor:pointer" title="close side menu" id="myOverlay"></div>

  <!-- !PAGE CONTENT! -->
  <div class="w3-main" style="margin-left:340px;margin-right:40px">

    <!-- Header -->
    <div class="w3-container" style="margin-top:80px" id="showcase">
      <h1 class="w3-jumbo"><b>Search For Artist</b></h1>
      <h1 class="w3-xxxlarge w3-text-red"><b>Search Here:</b></h1>
      <hr style="width:50px;border:5px solid red" class="w3-round">
    </div>
    
    <!-- Photo grid (modal) -->
    <div class="w3-row-padding">
      <div class="w3-half searchContent">

        <p id="welcomeTag" class="center">Welcome to my final project! <br>To search, type in your artist's name. <br>To the right, it will display the artists top ten songs, along with each song's popularity ranking.</p>

        <input class="center" id="searchBar" type="text" placeholder="Search..." maxlength="19">
        <button onclick="getArtistsTopSongs()" type="button" id="searchButton">Find Top Songs</button>
        <p id="output"></p>
      </div>

      <div class="w3-half" id="artistOutputDiv">
        <p id="artistOutput">
          
        </p>
      </div>
      <div id="recent-artists">
        The past searched artists are: <br>
      </div>
      <button onclick="getPastArtists()" id="getPastArtists">Get Past Artists</button>
    </div>
  <!-- End page content -->
  </div>

  <!-- W3.CSS Container -->
  <div class="w3-light-grey w3-container w3-padding-32" style="margin-top:75px;padding-right:58px"><p class="w3-right">Powered by <a href="https://www.w3schools.com/w3css/default.asp" title="W3.CSS" target="_blank" class="w3-hover-opacity">w3.css</a></p></div>

  <script>
  // Script to open and close sidebar
  function w3_open() {
    document.getElementById("mySidebar").style.display = "block";
    document.getElementById("myOverlay").style.display = "block";
  }
  
  function w3_close() {
    document.getElementById("mySidebar").style.display = "none";
    document.getElementById("myOverlay").style.display = "none";
  }

  // Modal Image Gallery
  function onClick(element) {
    document.getElementById("img01").src = element.src;
    document.getElementById("modal01").style.display = "block";
    var captionText = document.getElementById("caption");
    captionText.innerHTML = element.alt;
  }
  </script>

  <script> 
      let artist = ""
  // function getArtistsTopSongs() {
  //   console.log("You made it to the function.")
  //   // Code to get an access token
  //   const SPOTIFY_CLIENT_ID = "ddfda215efb344e6a00f7fcbcd20fa8b";
  //   const SPOTIFY_KEY = '<%= process.env.SPOTIFY_KEY %>';
  //   console.log(SPOTIFY_KEY)
  //   let access_token
  //   let return_message

  //   // Grab the text from the search bar
  //   const searchBar = document.querySelector("#searchBar")
  //   artist = searchBar.value
    
  //   // Request an access token
  //   fetch('https://accounts.spotify.com/api/token', {
  //     method: 'POST',
  //     headers: {
  //       'Content-Type': 'application/x-www-form-urlencoded',
  //       Authorization: `Basic ${btoa(`${SPOTIFY_CLIENT_ID}:${SPOTIFY_KEY}`)}`,
  //     },
  //     body: 'grant_type=client_credentials',
  //   })
  //     .then(response => response.json())
  //     .then(data => {
  //       access_token = data.access_token;
    
  //       // Use the access token to search for an artist
  //       const params = new URLSearchParams({
  //         q: artist,
  //         type: 'artist',
  //       });
    
  //       return fetch(`https://api.spotify.com/v1/search?${params}`, {
  //         headers: {
  //           Authorization: `Bearer ${access_token}`,
  //         },
  //       });
  //     })
  //     .then(response => response.json())
  //     .then(data => {
  //       const artist_id = data.artists.items[0].id;
    
  //       // Use the access token and artist ID to get the top tracks
  //       const params = new URLSearchParams({
  //         country: 'US',
  //       });
    
  //       return fetch(`https://api.spotify.com/v1/artists/${artist_id}/top-tracks?${params}`, {
  //         headers: {
  //           Authorization: `Bearer ${access_token}`,
  //         },
  //       });
  //     })
  //     .then(response => response.json())
  //     .then(data => {
  //       return_message = artist + "'s top tracks are: <br>|------------------------------------------|<br>";
    
  //       // Loop through the top tracks and print their names and popularity
  //       for (const track of data.tracks) {
  //         const track_name = track.name;
  //         const track_popularity = track.popularity;
    
  //         return_message += `${track_name} &nbsp&nbsp&nbsp(Popularity: ${track_popularity})<br>`;
  //         console.log(`${track_name} (Popularity: ${track_popularity})`);

  //         outputTag = document.querySelector("#artistOutput")
  //         outputTag.innerHTML = return_message
  //       }
  //     });
  // }

  function getArtistsTopSongs() {
  console.log("You made it to the function.")
  // Code to get an access token
  const SPOTIFY_CLIENT_ID = "ddfda215efb344e6a00f7fcbcd20fa8b";
  const SPOTIFY_KEY = "4ed85a63955440d9bd7c9277db8b5e2e";
  console.log(SPOTIFY_KEY)
  let access_token
  let return_message

  // Grab the text from the search bar
  const searchBar = document.querySelector("#searchBar")
  artist = searchBar.value
  
  // Request an access token
  fetch('https://accounts.spotify.com/api/token', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      Authorization: `Basic ${btoa(`ddfda215efb344e6a00f7fcbcd20fa8b:4ed85a63955440d9bd7c9277db8b5e2e`)}`,
    },
    body: 'grant_type=client_credentials',
  })
    .then(response =>  {if (!response.ok) {
      throw new Error('Failed to get access token from Spotify API');
    }
    return response.json();
    })
    .then(data => {
      access_token = data.access_token;

      // Use the access token to search for an artist
      const params = new URLSearchParams({
        q: artist,
        type: 'artist',
      });

      return fetch(`https://api.spotify.com/v1/search?${params}`, {
        headers: {
          Authorization: `Bearer ${access_token}`,
        },
      });
    })
    .then(response => {
    if (!response.ok) {
      throw new Error('Failed to search for artist from Spotify API');
    }
    return response.json();
    })
    .then(data => {
      const artist_id = data.artists.items[0].id;

      // Use the access token and artist ID to get the top tracks
      const params = new URLSearchParams({
        country: 'US',
      });

      return fetch(`https://api.spotify.com/v1/artists/${artist_id}/top-tracks?${params}`, {
        headers: {
          Authorization: `Bearer ${access_token}`,
        },
      });
    })
    .then(response => {
    if (!response.ok) {
      throw new Error('Failed to get top tracks from Spotify API');
    }
    return response.json();
    })
    .then(data => {
      return_message = artist + "'s top tracks are: <br>|------------------------------------------|<br>";

      // Loop through the top tracks and print their names and popularity
      for (const track of data.tracks) {
        const track_name = track.name;
        const track_popularity = track.popularity;

        return_message += `${track_name} &nbsp&nbsp&nbsp(Popularity: ${track_popularity})<br>`;
        console.log(`${track_name} (Popularity: ${track_popularity})`);

        outputTag = document.querySelector("#artistOutput")
        outputTag.innerHTML = return_message
      }
      getPastArtists()
    })
    .catch(error => console.error(error));
}

  const searchButton = document.querySelector("#searchButton")

  searchButton.addEventListener("click", () => {
      // Send an HTTP request to the server to add the artist to the database
      fetch(`/add-artist`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ name: artist })
        })
        .then(response => response.text())
        .then(data => {
          console.log(data);
        });

        getPastArtists()
    });

      // Send an HTTP request to the server to get the last 5 artists added to the database
function getPastArtists() {
        console.log("made it to getPastArtists")

          fetch('/get-past-five-artists')
          .then(response => response.json())
          .then(data => {
            const recentArtistsDiv = document.getElementById('recent-artists');
            let returnPastArtists = "The past artists are: <br>"
            data.forEach(artist => {
              returnPastArtists += `- ${artist.name}<br>`
            });
            console.log(returnPastArtists)
            recentArtistsDiv.innerHTML = returnPastArtists
          });
}

getPastArtists()
  </script>
</body>